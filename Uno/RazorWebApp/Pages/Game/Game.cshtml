@page
@using Entities
@model RazorWebApp.Pages.Game.Game
@{
    Layout = null;
    int a = 0;
}

<!DOCTYPE html>


<html xmlns="http://www.w3.org/1999/html">
<head>
    <title></title>
</head>
<style>
    * {
      box-sizing: border-box;
      font-family: sans-serif;
    }
    
    .mainCard {
      fill: black; /* Replaced the SCSS variable $fill-card-color with its value */
    }
    
    .centerText {
      font-family: Arial;
      font-size: 11.5px;
      font-weight: bold;
      letter-spacing: -0.7px;
      -ms-transform: rotate(-15deg);
      -webkit-transform: rotate(-15deg);
      transform: rotate(-15deg);
      text-shadow: -0.1px 0.1px #806308, -0.2px 0.2px #806308, -0.3px 0.3px #806308, -0.4px 0.4px #806308, -0.5px 0.5px #806308, -0.6px 0.6px #806308, -0.7px 0.7px #806308;
    }
    
    .card-drawer {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
    }
    
    .uno-card {
      width: 10em;
      height: 15em;
      box-shadow: inset 0 0 3px rgba(0, 0, 0, .2);
      background: #fafafa;
      padding: 1em;
      border-radius: .5em;
      color: #fafafa;
      text-shadow: 0 0 3px black;
    }
    
    .container{
          display: flex;
          flex-wrap: wrap;
          justify-content: center;
          align-content: space-around;
          margin: 1em;
    }
    
    .uno-card .uno-card-body {
      height: 100%;
      width: 100%;
      border-radius: 1em;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }
    
    .uno-card .uno-card-body .uno-card-number {
      font-size: 3em;
      display: flex;
      justify-content: center;
    }
    
    .uno-card .uno-card-body::after,
    .uno-card .uno-card-body::before {
      padding: 1em;
      display: flex;
    }
    
    .uno-card .uno-card-body::after {
      justify-content: flex-end;
    }
    
    .uno-card .uno-card-body::before {
      justify-content: flex-start;
    }
    
    .uno-card.yellow .uno-card-body {
      background: goldenrod;
    }
    
    .uno-card.blue .uno-card-body {
      background: royalblue;
    }
    
    .uno-card.green .uno-card-body {
      background: forestgreen;
    }
    
    .uno-card.red .uno-card-body {
      background: red;
    }
    
    .uno-card.black .uno-card-body {
      background: #2f2f2f;
    }
    
    /* You need to manually expand the loop for each number */
    .uno-card.number-0 .uno-card-body::before,
    .uno-card.number-0 .uno-card-body::after,
    .uno-card.number-0 .uno-card-body .uno-card-number::before {
      content: '0';
    }
    
    .uno-card.number-1 .uno-card-body::before,
    .uno-card.number-1 .uno-card-body::after,
    .uno-card.number-1 .uno-card-body .uno-card-number::before {
      content: '1';
    }
    
    .uno-card.number-2 .uno-card-body::before,
    .uno-card.number-2 .uno-card-body::after,
    .uno-card.number-2 .uno-card-body .uno-card-number::before {
      content: '2';
    }
    
    .uno-card.number-3 .uno-card-body::before,
    .uno-card.number-3 .uno-card-body::after,
    .uno-card.number-3 .uno-card-body .uno-card-number::before {
      content: '3';
    }
    
    .uno-card.number-4 .uno-card-body::before,
    .uno-card.number-4 .uno-card-body::after,
    .uno-card.number-4 .uno-card-body .uno-card-number::before {
      content: '4';
    }
    
    .uno-card.number-5 .uno-card-body::before,
    .uno-card.number-5 .uno-card-body::after,
    .uno-card.number-5 .uno-card-body .uno-card-number::before {
      content: '5';
    }
    
    .uno-card.number-6 .uno-card-body::before,
    .uno-card.number-6 .uno-card-body::after,
    .uno-card.number-6 .uno-card-body .uno-card-number::before {
      content: '6';
    }
    
    .uno-card.number-7 .uno-card-body::before,
    .uno-card.number-7 .uno-card-body::after,
    .uno-card.number-7 .uno-card-body .uno-card-number::before {
      content: '7';
    }
    
    .uno-card.number-8 .uno-card-body::before,
    .uno-card.number-8 .uno-card-body::after,
    .uno-card.number-8 .uno-card-body .uno-card-number::before {
      content: '8';
    }
    
    .uno-card.number-9 .uno-card-body::before,
    .uno-card.number-9 .uno-card-body::after,
    .uno-card.number-9 .uno-card-body .uno-card-number::before {
      content: '9';
    }
    /* Repeat the above block for numbers 1 through 9 */
    
    .uno-card.draw-2 .uno-card-body::before,
    .uno-card.draw-2 .uno-card-body::after,
    .uno-card.draw-2 .uno-card-body .uno-card-number::before {
      content: '+2';
    }
    
    .uno-card.draw-4 .uno-card-body::before,
    .uno-card.draw-4 .uno-card-body::after,
    .uno-card.draw-4 .uno-card-body .uno-card-number::before {
      content: '+4';
    }
    
    .uno-card.reverse .uno-card-body::before,
    .uno-card.reverse .uno-card-body::after,
    .uno-card.reverse .uno-card-body .uno-card-number::before {
      content: '🔄';
    }
    
    .uno-card.skip .uno-card-body::before,
    .uno-card.skip .uno-card-body::after,
    .uno-card.skip .uno-card-body .uno-card-number::before {
      content: '❌';
      }
      
     .uno-card.wild .uno-card-body::before,
     .uno-card.wild .uno-card-body::after,
     .uno-card.wild .uno-card-body .uno-card-number::before {
      content: '🎨';
     }

</style>
<body>
<div>

    <h1>Active player ID: @Model.Engine.State.ActivePlayerNo</h1>
    <h2>@Model.Engine.State.Players[Model.Engine.State.ActivePlayerNo].Nickname's turn</h2>

    <div>
        @foreach (Player plyr in Model.Engine.State.Players)
        {
            <h3 style="display: inline-block; vertical-align: top;">@(a + 1 + ". " + plyr.Nickname + " - ")</h3>
            foreach (Card c in plyr.HandCards)
            {
                <svg width="30" height="52" style="display: inline-block; vertical-align: top;">
                    <!-- define symbol for backCard -->
                    <defs>
                        <symbol id="backCard" viewBox="0 0 300 520" stroke="white" stroke-width="11">
                            <rect class="mainCard" x="15" y="25" rx="10" ry="15" width="250" height="420"/>
                            <ellipse cx="230" cy="160" rx="97" ry="172" fill="red" stroke="red" style="-ms-transform: rotate(25deg);-webkit-transform: rotate(25deg);transform: rotate(25deg);"/>
                            <svg width="240" height="410" x="19" y="30">
                                <ellipse cx="-130" cy="230" rx="20" ry="20" fill="black" stroke="black" stroke-dasharray="6,7" stroke-width="418" opacity="0.15" style="-ms-transform: rotate(25deg);-webkit-transform: rotate(25deg); transform: rotate( -65deg);"/>
                            </svg>
                        </symbol>
                    </defs>

                    <!-- use symbol for backCard -->
                    <use xlink:href="#backCard"></use>

                    <!-- Gradient for text -->
                    <defs>
                        <linearGradient id="Gradient2" x1="0" x2="0" y1="0" y2="1">
                            <stop offset="0%" stop-color="white"/>
                            <stop offset="55%" stop-color="gold"/>
                            <stop offset="100%" stop-color="#806308"/>
                        </linearGradient>
                    </defs>

                    <!-- Text on card -->
                    <text class="centerText" x="-4" y="30" fill="url(#Gradient2)">UNO</text>
                </svg>
            }
            <br/>
            a++;
        }
    </div>
    <div class="card-drawer">
        @Html.Raw(HtmlCardFormatter.Convert(Model.Engine.State.UsedDeck.First()))
    </div>
    <div>
        @if (Model.Engine.State.UsedDeck.First().Color == EColors.Black)
        {
            <h3 style="text-align: center">Color in play: @Model.Engine.State.ColorInPlay</h3>
        }
    </div>
    <div>
        <h3 style="text-align: center">Last card played</h3>
    </div>
    @if (Model.Engine.State.Players[Model.PlayerId].PlayerType == EPlayerType.Human)
    {
        <h2>Your deck:</h2>
        <div class="card-drawer">
            @foreach (var card in Model.Engine.State.Players[Model.PlayerId].HandCards)
            {
                int cardIndex = Model.Engine.State.Players[Model.PlayerId].HandCards.IndexOf(card);

                <form method="post" asp-page-handler="CardClicked" class="card-form">
                    <input type="hidden" name="gameId" value="@Model.GameId"/>
                    <input type="hidden" name="cardIndex" value="@cardIndex"/>
                    <input type="hidden" name="currPlayer" value="@Model.PlayerId"/>
                    <div class="container">
                        <button type="submit" class="card-button">
                            @Html.Raw(HtmlCardFormatter.Convert(card))
                        </button>
                    </div>

                </form>
            }
        </div>
        <div>
            @if (TempData["showColorSelection"] != null && (bool)(TempData["showColorSelection"] ?? false))
            {
                <form method="post" asp-page-handler="SelectColor">
                    <input type="hidden" name="gameId" value="@Model.GameId"/>
                    <input type="hidden" name="currPlayer" value="@Model.PlayerId"/>
                    <button type="submit" class="btn btn-primary" name="selectedColor" value="yellow">Yellow</button>
                    <button type="submit" class="btn btn-primary" name="selectedColor" value="blue">Blue</button>
                    <button type="submit" class="btn btn-primary" name="selectedColor" value="green">Green</button>
                    <button type="submit" class="btn btn-primary" name="selectedColor" value="red">Red</button>
                </form>
            }
        </div>
    }
    @if (Model.Engine.State.Players[Model.PlayerId].PlayerType == EPlayerType.AI && Model.PlayerId == Model.Engine.State.ActivePlayerNo)
    {
        <form method="post" asp-page-handler="AIPlay">
            <input type="hidden" name="gameId" value="@Model.GameId"/>
            <input type="hidden" name="currPlayer" value="@Model.PlayerId"/>
            <button type="submit" class="btn btn-primary">Let AI play</button>
        </form>
    }


    
</div>
@if (!Model.IsPlayerTurn)
{
    <h1>It's not your turn yet!!</h1>
}

else
{
    <h4 text-align="center">To play a card, just click on it</h4>

    <form method="post" asp-page-handler="DrawCard">
        <input type="hidden" name="gameId" value="@Model.GameId"/>
        <input type="hidden" name="currPlayer" value="@Model.PlayerId"/>
        <input type="submit" value="Draw a card" class="btn btn-primary"/>
    </form>

    <form method="post" asp-page-handler="SkipTurn">
        <input type="hidden" name="gameId" value="@Model.GameId"/>
        <input type="hidden" name="currPlayer" value="@Model.PlayerId"/>
        <input type="submit" value="Skip a turn" class="btn btn-primary"/>
    </form>

    <form method="post" asp-page-handler="Shout">
        <input type="hidden" name="gameId" value="@Model.GameId"/>
        <input type="hidden" name="currPlayer" value="@Model.PlayerId"/>
        <input name="shoutingText" type="text" placeholder="Shout...">
        <button type="submit" class="btn btn-primary">Shout something!</button>
    </form>
}

</body>
</html>